/*
 * Copyright 2021 the original author or authors.
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * https://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.openrewrite.java.security;

import org.openrewrite.*;
import org.openrewrite.java.JavaIsoVisitor;
import org.openrewrite.java.JavaTemplate;
import org.openrewrite.java.MethodMatcher;
import org.openrewrite.java.VariableNameUtils;
import org.openrewrite.java.search.UsesType;
import org.openrewrite.java.tree.*;
import org.openrewrite.xml.XmlIsoVisitor;
import org.openrewrite.xml.tree.Xml;

import javax.xml.stream.XMLInputFactory;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.stream.Collectors;


public class XmlParserXXEVulnerability extends ScanningRecipe<XmlParserXXEVulnerability.ExternalDTDs> {

    private static final String PUBLIC_ID_STRING = "PUBLIC";
    private static final String SYSTEM_ID_STRING = "SYSTEM";
    private static final MethodMatcher XML_PARSER_FACTORY_INSTANCE = new MethodMatcher("javax.xml.stream.XMLInputFactory new*()");
    private static final MethodMatcher XML_PARSER_FACTORY_SET_PROPERTY = new MethodMatcher("javax.xml.stream.XMLInputFactory setProperty(java.lang.String, ..)");

    private static final MethodMatcher XML_PARSER_FACTORY_SET_RESOLVER = new MethodMatcher("javax.xml.stream.XMLInputFactory setXMLResolver(javax.xml.stream.XMLResolver)");

    private static final String XML_FACTORY_FQN = "javax.xml.stream.XMLInputFactory";
    private static final String SUPPORTING_EXTERNAL_ENTITIES_PROPERTY_NAME = "IS_SUPPORTING_EXTERNAL_ENTITIES";
    private static final String SUPPORT_DTD_FALSE_PROPERTY_NAME = "SUPPORT_DTD";

    private static final String SUPPORT_DTD_TRUE_PROPERTY_NAME = "SUPPORT_DTD_TRUE";
    private static final String XML_PARSER_INITIALIZATION_METHOD = "xml-parser-initialization-method";
    private static final String XML_FACTORY_VARIABLE_NAME = "xml-factory-variable-name";

    private static final String XML_RESOLVER_METHOD = "xml-resolver-initialization-method";

    static String extractURLFromEntity(String identName) {
        if (identName.contains(PUBLIC_ID_STRING)) {
            String[] lines = identName.split("\\r?\\n|\\r");
            String dtdPath = lines[lines.length - 1].trim();
            dtdPath = dtdPath.split("\"")[1];
            return dtdPath;
        } else {
            return identName.split("\"")[1];
        }
    }

    public static final class ExternalDTDs {
        Set<String> externalDTDs = new CopyOnWriteArraySet<>();
    }

    @Override
    public String getDisplayName() {
        return "XML parser XXE vulnerability";
    }

    @Override
    public String getDescription() {
        return "Avoid exposing dangerous features of the XML parser by setting XMLInputFactory `IS_SUPPORTING_EXTERNAL_ENTITIES` and `SUPPORT_DTD` properties to `false`.";
    }

    @Override
    public ExternalDTDs getInitialValue(ExecutionContext ctx) {
        return new ExternalDTDs();
    }

    @Override
    public TreeVisitor<?, ExecutionContext> getScanner(ExternalDTDs acc) {


        return new XmlIsoVisitor<ExecutionContext>() {
            @Override
            public Xml.DocTypeDecl visitDocTypeDecl(Xml.DocTypeDecl docTypeDecl, ExecutionContext executionContext) {
                if (docTypeDecl.getExternalSubsets() != null) {
                    for (Xml.Element element : docTypeDecl.getExternalSubsets().getElements()) {
                        for (Xml.Ident ident : element.getSubset()) {
                            acc.externalDTDs.add(extractURLFromEntity(ident.getName()));
                        }
                    }
                }
                if (docTypeDecl.getInternalSubset() != null) {
                    if (!docTypeDecl.getInternalSubset().isEmpty()) {
                        if (docTypeDecl.getExternalId() != null) {
                            if ("PUBLIC".equals(docTypeDecl.getExternalId().getName()) && docTypeDecl.getInternalSubset().size() > 1) {
                                acc.externalDTDs.add(docTypeDecl.getInternalSubset().get(1).getName().replace("\"", ""));
                            } else if ("SYSTEM".equals(docTypeDecl.getExternalId().getName())) {
                                acc.externalDTDs.add(docTypeDecl.getInternalSubset().get(0).getName().replace("\"", ""));
                            }
                        }
                    }
                }

                return super.visitDocTypeDecl(docTypeDecl, executionContext);
            }
        };
    }

    //q: What is Java doc format?
    @Override
    public TreeVisitor<?, ExecutionContext> getVisitor(ExternalDTDs acc) {

        return Preconditions.check(new UsesType<>(XML_FACTORY_FQN, true), new JavaIsoVisitor<ExecutionContext>() {
            @Override
            public J.ClassDeclaration visitClassDeclaration(J.ClassDeclaration classDecl, ExecutionContext ctx) {

                J.ClassDeclaration cd = super.visitClassDeclaration(classDecl, ctx);
                Cursor supportsExternalCursor = getCursor().getMessage(SUPPORTING_EXTERNAL_ENTITIES_PROPERTY_NAME);
                Cursor supportsFalseDTDCursor = getCursor().getMessage(SUPPORT_DTD_FALSE_PROPERTY_NAME);
                Cursor supportsDTDTrueCursor = getCursor().getMessage(SUPPORT_DTD_TRUE_PROPERTY_NAME);
                Cursor initializationCursor = getCursor().getMessage(XML_PARSER_INITIALIZATION_METHOD);
                String xmlFactoryVariableName = getCursor().getMessage(XML_FACTORY_VARIABLE_NAME);
                Cursor xmlResolverMethod = getCursor().getMessage(XML_RESOLVER_METHOD);

                Cursor setPropertyBlockCursor = null;
                if (supportsExternalCursor == null && supportsFalseDTDCursor == null) {
                    setPropertyBlockCursor = initializationCursor;

                } else if (supportsExternalCursor == null ^ supportsFalseDTDCursor == null) {
                    setPropertyBlockCursor = supportsExternalCursor == null ? supportsFalseDTDCursor : supportsExternalCursor;
                }
                if (setPropertyBlockCursor != null && xmlFactoryVariableName != null) {
                    doAfterVisit(new XmlFactoryInsertPropertyStatementVisitor(
                            setPropertyBlockCursor.getValue(),
                            xmlFactoryVariableName,
                            supportsExternalCursor == null,
                            supportsFalseDTDCursor == null,
                            acc.externalDTDs.isEmpty(),
                            supportsDTDTrueCursor == null,
                            xmlResolverMethod == null,
                            acc
                    ));
                }
                return cd;
            }

            @Override
            public J.VariableDeclarations.NamedVariable visitVariable(J.VariableDeclarations.NamedVariable variable, ExecutionContext ctx) {
                J.VariableDeclarations.NamedVariable v = super.visitVariable(variable, ctx);
                if (TypeUtils.isOfClassType(v.getType(), XML_FACTORY_FQN)) {
                    getCursor().putMessageOnFirstEnclosing(J.ClassDeclaration.class, XML_FACTORY_VARIABLE_NAME, v.getSimpleName());
                }
                return v;
            }

            @Override
            public J.MethodInvocation visitMethodInvocation(J.MethodInvocation method, ExecutionContext ctx) {
                J.MethodInvocation m = super.visitMethodInvocation(method, ctx);
                if (XML_PARSER_FACTORY_INSTANCE.matches(m)) {
                    getCursor().putMessageOnFirstEnclosing(J.ClassDeclaration.class, XML_PARSER_INITIALIZATION_METHOD, getCursor().dropParentUntil(J.Block.class::isInstance));
                } else if (XML_PARSER_FACTORY_SET_PROPERTY.matches(m) && m.getArguments().get(0) instanceof J.FieldAccess) {
                    J.FieldAccess fa = (J.FieldAccess) m.getArguments().get(0);
                    if (SUPPORTING_EXTERNAL_ENTITIES_PROPERTY_NAME.equals(fa.getSimpleName())) {
                        getCursor().putMessageOnFirstEnclosing(J.ClassDeclaration.class, SUPPORTING_EXTERNAL_ENTITIES_PROPERTY_NAME, getCursor().dropParentUntil(J.Block.class::isInstance));
                    } else if (SUPPORT_DTD_FALSE_PROPERTY_NAME.equals(fa.getSimpleName())) {
                        checkDTDSupport(m);
                    }
                } else if (XML_PARSER_FACTORY_SET_PROPERTY.matches(m) && m.getArguments().get(0) instanceof J.Literal) {
                    J.Literal literal = (J.Literal) m.getArguments().get(0);
                    if (TypeUtils.isString(literal.getType())) {
                        if (XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES.equals(literal.getValue())) {
                            getCursor().putMessageOnFirstEnclosing(J.ClassDeclaration.class, SUPPORTING_EXTERNAL_ENTITIES_PROPERTY_NAME, getCursor().dropParentUntil(J.Block.class::isInstance));
                        } else if (XMLInputFactory.SUPPORT_DTD.equals(literal.getValue())) {
                            checkDTDSupport(m);
                        }
                    }
                } else if (XML_PARSER_FACTORY_SET_RESOLVER.matches(m)) {
                    getCursor().putMessageOnFirstEnclosing(J.ClassDeclaration.class, XML_RESOLVER_METHOD, getCursor().dropParentUntil((J.Block.class::isInstance)));
                }
                return m;


            }

            private void checkDTDSupport(J.MethodInvocation m) {
                if (m.getArguments().get(1) instanceof J.Literal) {
                    J.Literal literal = (J.Literal) m.getArguments().get(1);
                    if (Boolean.TRUE.equals(literal.getValue())) {
                        getCursor().putMessageOnFirstEnclosing(J.ClassDeclaration.class, SUPPORT_DTD_TRUE_PROPERTY_NAME, getCursor().dropParentUntil(J.Block.class::isInstance));
                    } else {
                        getCursor().putMessageOnFirstEnclosing(J.ClassDeclaration.class, SUPPORT_DTD_FALSE_PROPERTY_NAME, getCursor().dropParentUntil(J.Block.class::isInstance));
                    }
                }
            }
        });
    }

    private static class XmlFactoryInsertPropertyStatementVisitor extends JavaIsoVisitor<ExecutionContext> {
        private final J.Block scope;
        private final StringBuilder propertyTemplate = new StringBuilder();
        private final XmlParserXXEVulnerability.ExternalDTDs acc;

        private final boolean generateAllowList;


        XmlFactoryInsertPropertyStatementVisitor(
                J.Block scope,
                String factoryVariableName,
                boolean needsExternalEntitiesDisabled,
                boolean needsSupportDTDFalse,
                boolean accIsEmpty,
                boolean needsSupportDTDTrue,
                boolean needsResolverMethod,
                XmlParserXXEVulnerability.ExternalDTDs acc
        ) {
            this.scope = scope;
            this.acc = acc;
            if (needsExternalEntitiesDisabled) {
                propertyTemplate.append(factoryVariableName).append(".setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);");
            }
            if (needsSupportDTDFalse && accIsEmpty) {
                if (needsSupportDTDTrue) {
                    propertyTemplate.append(factoryVariableName).append(".setProperty(XMLInputFactory.SUPPORT_DTD, false);");
                }
            }
            if (needsSupportDTDFalse && !accIsEmpty) {
                if (needsResolverMethod && needsSupportDTDTrue) {
                    propertyTemplate.append(factoryVariableName).append(".setProperty(XMLInputFactory.SUPPORT_DTD, true);");
                }
                this.generateAllowList = needsResolverMethod;
            } else if (!needsSupportDTDTrue && !accIsEmpty) {
                this.generateAllowList = needsResolverMethod;
            } else {
                this.generateAllowList = false;
            }
        }

        private Set<String> addAllowList(boolean generateAllowList) {

            Set<String> imports = new HashSet<>();
            if (acc.externalDTDs.isEmpty() || !generateAllowList) {
                return Collections.emptySet();
            }

            String newAllowListVariableName = VariableNameUtils.generateVariableName(
                    "allowList",
                    getCursor(),
                    VariableNameUtils.GenerationStrategy.INCREMENT_NUMBER
            );

            if (acc.externalDTDs.size() > 1) {
                imports.add("java.util.Collection");
                imports.add("java.util.Arrays");
                imports.add("javax.xml.stream.XMLStreamException");

                propertyTemplate.append(
                        "Collection<String>" + newAllowListVariableName + " = Arrays.asList(\n"
                );
            } else {
                imports.add("java.util.Collection");
                imports.add("java.util.Collections");
                imports.add("javax.xml.stream.XMLStreamException");

                propertyTemplate.append(
                        "Collection<String>" + newAllowListVariableName + " = Collections.singleton(\n"
                );
            }

            String allowListContent = acc.externalDTDs.stream().map(dtd -> '"' + dtd + '"').collect(Collectors.joining(
                    ",\n\t",
                    "\t",
                    ""
            ));
            propertyTemplate.append(allowListContent).append("\n);\n");
            propertyTemplate.append(
                    "f.setXMLResolver((publicID, systemID, baseURI, namespace) -> {\n" +
                            "   if (" + newAllowListVariableName + ".contains(systemID)){\n" +
                            "       // returning null will cause the parser to resolve the entity\n" +
                            "       return null;\n" +
                            "   }\n" +
                            "   throw new XMLStreamException(\"Loading of DTD was blocked to prevent XXE: \" + systemID);\n" +
                            "});"
            );
            return imports;
        }

        @Override
        public J.Block visitBlock(J.Block block, ExecutionContext ctx) {
            J.Block b = super.visitBlock(block, ctx);
            Statement beforeStatement = null;
            if (b.isScope(scope)) {
                for (int i = b.getStatements().size() - 2; i > -1; i--) {
                    Statement st = b.getStatements().get(i);
                    Statement stBefore = b.getStatements().get(i + 1);
                    if (st instanceof J.MethodInvocation) {
                        J.MethodInvocation m = (J.MethodInvocation) st;
                        if (XML_PARSER_FACTORY_INSTANCE.matches(m) || XML_PARSER_FACTORY_SET_PROPERTY.matches(m)) {
                            beforeStatement = stBefore;
                        }
                    } else if (st instanceof J.VariableDeclarations) {
                        J.VariableDeclarations vd = (J.VariableDeclarations) st;
                        if (vd.getVariables().get(0).getInitializer() instanceof J.MethodInvocation) {
                            J.MethodInvocation m = (J.MethodInvocation) vd.getVariables().get(0).getInitializer();
                            if (m != null && XML_PARSER_FACTORY_INSTANCE.matches(m)) {
                                beforeStatement = stBefore;
                            }
                        }
                    }
                }

                Set<String> imports = addAllowList(generateAllowList);

                if (getCursor().getParent() != null && getCursor().getParent().getValue() instanceof J.ClassDeclaration) {
                    propertyTemplate.insert(0, "{\n").append("}");
                }
                JavaCoordinates insertCoordinates = beforeStatement != null ?
                        beforeStatement.getCoordinates().before() :
                        b.getCoordinates().lastStatement();
                b = JavaTemplate
                        .builder(propertyTemplate.toString())
                        .imports(imports.toArray(new String[0]))
                        .contextSensitive()
                        .build()
                        .apply(new Cursor(getCursor().getParent(), b), insertCoordinates);
                if (b != block) {
                    imports.forEach(this::maybeAddImport);
                }
            }
            return b;
        }
    }
}
